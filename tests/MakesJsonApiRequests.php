<?php

namespace Tests;

use Illuminate\Support\Str;
use Illuminate\Testing\TestResponse;
use PHPUnit\Framework\Assert as PHPUnit;
use PHPUnit\Framework\ExpectationFailedException;

trait MakesJsonApiRequests
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        TestResponse::macro('assertJsonApiValidationErrors', $this->assertJsonApiValidationErrors());
    }

    protected function assertJsonApiValidationErrors(): \Closure
    {
        return function ($attribute) {
            /** @var TestResponse $this */
            $pointer = (Str::of($attribute)->startsWith('data')
                ? "/" . str_replace('.', '/', $attribute)
                : "/data/attributes/{$attribute}");
            try {
                $response = $this->assertJsonFragment([
                    'source' => ['pointer' => $pointer]
                ]);
            } catch (ExpectationFailedException $e) {
                PHPUnit::fail("Failed to find a JSON:API validation error for key: '{$attribute}'"
                    . PHP_EOL . PHP_EOL . $e->getMessage());
            }
            try {
                $this->assertJsonStructure([
                    'errors' => [
                        ['title', 'detail', 'source' => ['pointer']]
                    ]
                ]);
            } catch (ExpectationFailedException $e) {
                PHPUnit::fail("Failed to find a valid JSON:API error response"
                    . PHP_EOL . PHP_EOL . $e->getMessage());
            }

            $this->assertHeader(
                'content-type', 'application/vnd.api+json'
            );
            $this->assertStatus(422);
        };
    }

    protected bool $formatJsonApiDocument = true;

    protected bool $addJsonApiHeaders = true;

    public function withoutJsonApiHeaders(): self
    {
        $this->addJsonApiHeaders = false;

        return $this;
    }

    public function withoutJsonApiDocumentFormatting(): self
    {
        $this->formatJsonApiDocument = false;

        return $this;
    }

    public function withoutJsonApiHelpers(): self
    {
        $this->addJsonApiHeaders = false;

        $this->formatJsonApiDocument = false;

        return $this;
    }

    public function json($method, $uri, array $data = [], array $headers = [], $options = 0): TestResponse
    {
        if ($this->addJsonApiHeaders) {
            $headers['accept'] = 'application/vnd.api+json';

            if ($method === 'POST' || $method === 'PATCH') {
                $headers['content-type'] = 'application/vnd.api+json';
            }
        }

//        if ($this->formatJsonApiDocument && ($method === 'POST' || $method === 'PATCH')) {
//            if (!isset($data['data'])) {
//                $formattedData = $this->getFormattedData($uri, $data);
//            }
//        }
//        return parent::json($method, $uri, $formattedData ?? $data, $headers, $options);

        if ($this->formatJsonApiDocument) {
            $formattedData['data']['attributes'] = $data;
            $formattedData['data']['type'] = (string)Str::of($uri)->after('api/v1/');
        }

        return parent::json($method, $uri, $formattedData ?? $data, $headers, $options);
    }

//    protected function getFormattedData($uri, array $data): array
//    {
//        $path = parse_url($uri)['path'];
//        $type = (string)Str::of($path)->after('api/v1/')->before('/');
//        $id = (string)Str::of($path)->after($type)->replace('/', '');
//
//        return Document::type($type)
//            ->id($id)
//            ->attributes($data)
//            ->relationshipData($data['_relationships'] ?? [])
//            ->toArray();
//    }
}


